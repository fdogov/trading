// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storegen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Ensure, that AccountStoreMock does implement store.AccountStore.
// If this is not the case, regenerate this file with moq.
var _ store.AccountStore = &AccountStoreMock{}

// AccountStoreMock is a mock implementation of store.AccountStore.
//
//	func TestSomethingThatUsesAccountStore(t *testing.T) {
//
//		// make and configure a mocked store.AccountStore
//		mockedAccountStore := &AccountStoreMock{
//			CreateFunc: func(ctx context.Context, account *entity.Account) error {
//				panic("mock out the Create method")
//			},
//			GetByExtIDFunc: func(ctx context.Context, extID string) (*entity.Account, error) {
//				panic("mock out the GetByExtID method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*entity.Account, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByUserIDFunc: func(ctx context.Context, userID string) ([]*entity.Account, error) {
//				panic("mock out the GetByUserID method")
//			},
//			UpdateBalanceFunc: func(ctx context.Context, id uuid.UUID, amount decimal.Decimal) error {
//				panic("mock out the UpdateBalance method")
//			},
//		}
//
//		// use mockedAccountStore in code that requires store.AccountStore
//		// and then make assertions.
//
//	}
type AccountStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, account *entity.Account) error

	// GetByExtIDFunc mocks the GetByExtID method.
	GetByExtIDFunc func(ctx context.Context, extID string) (*entity.Account, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*entity.Account, error)

	// GetByUserIDFunc mocks the GetByUserID method.
	GetByUserIDFunc func(ctx context.Context, userID string) ([]*entity.Account, error)

	// UpdateBalanceFunc mocks the UpdateBalance method.
	UpdateBalanceFunc func(ctx context.Context, id uuid.UUID, amount decimal.Decimal) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entity.Account
		}
		// GetByExtID holds details about calls to the GetByExtID method.
		GetByExtID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExtID is the extID argument value.
			ExtID string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByUserID holds details about calls to the GetByUserID method.
		GetByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// UpdateBalance holds details about calls to the UpdateBalance method.
		UpdateBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Amount is the amount argument value.
			Amount decimal.Decimal
		}
	}
	lockCreate        sync.RWMutex
	lockGetByExtID    sync.RWMutex
	lockGetByID       sync.RWMutex
	lockGetByUserID   sync.RWMutex
	lockUpdateBalance sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AccountStoreMock) Create(ctx context.Context, account *entity.Account) error {
	if mock.CreateFunc == nil {
		panic("AccountStoreMock.CreateFunc: method is nil but AccountStore.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entity.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, account)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAccountStore.CreateCalls())
func (mock *AccountStoreMock) CreateCalls() []struct {
	Ctx     context.Context
	Account *entity.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *entity.Account
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByExtID calls GetByExtIDFunc.
func (mock *AccountStoreMock) GetByExtID(ctx context.Context, extID string) (*entity.Account, error) {
	if mock.GetByExtIDFunc == nil {
		panic("AccountStoreMock.GetByExtIDFunc: method is nil but AccountStore.GetByExtID was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ExtID string
	}{
		Ctx:   ctx,
		ExtID: extID,
	}
	mock.lockGetByExtID.Lock()
	mock.calls.GetByExtID = append(mock.calls.GetByExtID, callInfo)
	mock.lockGetByExtID.Unlock()
	return mock.GetByExtIDFunc(ctx, extID)
}

// GetByExtIDCalls gets all the calls that were made to GetByExtID.
// Check the length with:
//
//	len(mockedAccountStore.GetByExtIDCalls())
func (mock *AccountStoreMock) GetByExtIDCalls() []struct {
	Ctx   context.Context
	ExtID string
} {
	var calls []struct {
		Ctx   context.Context
		ExtID string
	}
	mock.lockGetByExtID.RLock()
	calls = mock.calls.GetByExtID
	mock.lockGetByExtID.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *AccountStoreMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Account, error) {
	if mock.GetByIDFunc == nil {
		panic("AccountStoreMock.GetByIDFunc: method is nil but AccountStore.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedAccountStore.GetByIDCalls())
func (mock *AccountStoreMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByUserID calls GetByUserIDFunc.
func (mock *AccountStoreMock) GetByUserID(ctx context.Context, userID string) ([]*entity.Account, error) {
	if mock.GetByUserIDFunc == nil {
		panic("AccountStoreMock.GetByUserIDFunc: method is nil but AccountStore.GetByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetByUserID.Lock()
	mock.calls.GetByUserID = append(mock.calls.GetByUserID, callInfo)
	mock.lockGetByUserID.Unlock()
	return mock.GetByUserIDFunc(ctx, userID)
}

// GetByUserIDCalls gets all the calls that were made to GetByUserID.
// Check the length with:
//
//	len(mockedAccountStore.GetByUserIDCalls())
func (mock *AccountStoreMock) GetByUserIDCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetByUserID.RLock()
	calls = mock.calls.GetByUserID
	mock.lockGetByUserID.RUnlock()
	return calls
}

// UpdateBalance calls UpdateBalanceFunc.
func (mock *AccountStoreMock) UpdateBalance(ctx context.Context, id uuid.UUID, amount decimal.Decimal) error {
	if mock.UpdateBalanceFunc == nil {
		panic("AccountStoreMock.UpdateBalanceFunc: method is nil but AccountStore.UpdateBalance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Amount decimal.Decimal
	}{
		Ctx:    ctx,
		ID:     id,
		Amount: amount,
	}
	mock.lockUpdateBalance.Lock()
	mock.calls.UpdateBalance = append(mock.calls.UpdateBalance, callInfo)
	mock.lockUpdateBalance.Unlock()
	return mock.UpdateBalanceFunc(ctx, id, amount)
}

// UpdateBalanceCalls gets all the calls that were made to UpdateBalance.
// Check the length with:
//
//	len(mockedAccountStore.UpdateBalanceCalls())
func (mock *AccountStoreMock) UpdateBalanceCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Amount decimal.Decimal
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Amount decimal.Decimal
	}
	mock.lockUpdateBalance.RLock()
	calls = mock.calls.UpdateBalance
	mock.lockUpdateBalance.RUnlock()
	return calls
}
