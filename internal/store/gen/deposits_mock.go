// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storegen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
)

// Ensure, that DepositStoreMock does implement store.DepositStore.
// If this is not the case, regenerate this file with moq.
var _ store.DepositStore = &DepositStoreMock{}

// DepositStoreMock is a mock implementation of store.DepositStore.
//
//	func TestSomethingThatUsesDepositStore(t *testing.T) {
//
//		// make and configure a mocked store.DepositStore
//		mockedDepositStore := &DepositStoreMock{
//			CreateFunc: func(ctx context.Context, deposit *entity.Deposit) error {
//				panic("mock out the Create method")
//			},
//			GetByAccountIDFunc: func(ctx context.Context, accountID uuid.UUID) ([]*entity.Deposit, error) {
//				panic("mock out the GetByAccountID method")
//			},
//			GetByExtIDFunc: func(ctx context.Context, extID string) (*entity.Deposit, error) {
//				panic("mock out the GetByExtID method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*entity.Deposit, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByIdempotencyKeyFunc: func(ctx context.Context, key string) (*entity.Deposit, error) {
//				panic("mock out the GetByIdempotencyKey method")
//			},
//			UpdateFunc: func(ctx context.Context, deposit *entity.Deposit) error {
//				panic("mock out the Update method")
//			},
//			UpdateExternalDataFunc: func(ctx context.Context, id uuid.UUID, extID string, status entity.DepositStatus) error {
//				panic("mock out the UpdateExternalData method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, id uuid.UUID, status entity.DepositStatus) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedDepositStore in code that requires store.DepositStore
//		// and then make assertions.
//
//	}
type DepositStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, deposit *entity.Deposit) error

	// GetByAccountIDFunc mocks the GetByAccountID method.
	GetByAccountIDFunc func(ctx context.Context, accountID uuid.UUID) ([]*entity.Deposit, error)

	// GetByExtIDFunc mocks the GetByExtID method.
	GetByExtIDFunc func(ctx context.Context, extID string) (*entity.Deposit, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*entity.Deposit, error)

	// GetByIdempotencyKeyFunc mocks the GetByIdempotencyKey method.
	GetByIdempotencyKeyFunc func(ctx context.Context, key string) (*entity.Deposit, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, deposit *entity.Deposit) error

	// UpdateExternalDataFunc mocks the UpdateExternalData method.
	UpdateExternalDataFunc func(ctx context.Context, id uuid.UUID, extID string, status entity.DepositStatus) error

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, id uuid.UUID, status entity.DepositStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deposit is the deposit argument value.
			Deposit *entity.Deposit
		}
		// GetByAccountID holds details about calls to the GetByAccountID method.
		GetByAccountID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID uuid.UUID
		}
		// GetByExtID holds details about calls to the GetByExtID method.
		GetByExtID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExtID is the extID argument value.
			ExtID string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByIdempotencyKey holds details about calls to the GetByIdempotencyKey method.
		GetByIdempotencyKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deposit is the deposit argument value.
			Deposit *entity.Deposit
		}
		// UpdateExternalData holds details about calls to the UpdateExternalData method.
		UpdateExternalData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// ExtID is the extID argument value.
			ExtID string
			// Status is the status argument value.
			Status entity.DepositStatus
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Status is the status argument value.
			Status entity.DepositStatus
		}
	}
	lockCreate              sync.RWMutex
	lockGetByAccountID      sync.RWMutex
	lockGetByExtID          sync.RWMutex
	lockGetByID             sync.RWMutex
	lockGetByIdempotencyKey sync.RWMutex
	lockUpdate              sync.RWMutex
	lockUpdateExternalData  sync.RWMutex
	lockUpdateStatus        sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DepositStoreMock) Create(ctx context.Context, deposit *entity.Deposit) error {
	if mock.CreateFunc == nil {
		panic("DepositStoreMock.CreateFunc: method is nil but DepositStore.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Deposit *entity.Deposit
	}{
		Ctx:     ctx,
		Deposit: deposit,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, deposit)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDepositStore.CreateCalls())
func (mock *DepositStoreMock) CreateCalls() []struct {
	Ctx     context.Context
	Deposit *entity.Deposit
} {
	var calls []struct {
		Ctx     context.Context
		Deposit *entity.Deposit
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByAccountID calls GetByAccountIDFunc.
func (mock *DepositStoreMock) GetByAccountID(ctx context.Context, accountID uuid.UUID) ([]*entity.Deposit, error) {
	if mock.GetByAccountIDFunc == nil {
		panic("DepositStoreMock.GetByAccountIDFunc: method is nil but DepositStore.GetByAccountID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID uuid.UUID
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetByAccountID.Lock()
	mock.calls.GetByAccountID = append(mock.calls.GetByAccountID, callInfo)
	mock.lockGetByAccountID.Unlock()
	return mock.GetByAccountIDFunc(ctx, accountID)
}

// GetByAccountIDCalls gets all the calls that were made to GetByAccountID.
// Check the length with:
//
//	len(mockedDepositStore.GetByAccountIDCalls())
func (mock *DepositStoreMock) GetByAccountIDCalls() []struct {
	Ctx       context.Context
	AccountID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AccountID uuid.UUID
	}
	mock.lockGetByAccountID.RLock()
	calls = mock.calls.GetByAccountID
	mock.lockGetByAccountID.RUnlock()
	return calls
}

// GetByExtID calls GetByExtIDFunc.
func (mock *DepositStoreMock) GetByExtID(ctx context.Context, extID string) (*entity.Deposit, error) {
	if mock.GetByExtIDFunc == nil {
		panic("DepositStoreMock.GetByExtIDFunc: method is nil but DepositStore.GetByExtID was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ExtID string
	}{
		Ctx:   ctx,
		ExtID: extID,
	}
	mock.lockGetByExtID.Lock()
	mock.calls.GetByExtID = append(mock.calls.GetByExtID, callInfo)
	mock.lockGetByExtID.Unlock()
	return mock.GetByExtIDFunc(ctx, extID)
}

// GetByExtIDCalls gets all the calls that were made to GetByExtID.
// Check the length with:
//
//	len(mockedDepositStore.GetByExtIDCalls())
func (mock *DepositStoreMock) GetByExtIDCalls() []struct {
	Ctx   context.Context
	ExtID string
} {
	var calls []struct {
		Ctx   context.Context
		ExtID string
	}
	mock.lockGetByExtID.RLock()
	calls = mock.calls.GetByExtID
	mock.lockGetByExtID.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *DepositStoreMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Deposit, error) {
	if mock.GetByIDFunc == nil {
		panic("DepositStoreMock.GetByIDFunc: method is nil but DepositStore.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedDepositStore.GetByIDCalls())
func (mock *DepositStoreMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByIdempotencyKey calls GetByIdempotencyKeyFunc.
func (mock *DepositStoreMock) GetByIdempotencyKey(ctx context.Context, key string) (*entity.Deposit, error) {
	if mock.GetByIdempotencyKeyFunc == nil {
		panic("DepositStoreMock.GetByIdempotencyKeyFunc: method is nil but DepositStore.GetByIdempotencyKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetByIdempotencyKey.Lock()
	mock.calls.GetByIdempotencyKey = append(mock.calls.GetByIdempotencyKey, callInfo)
	mock.lockGetByIdempotencyKey.Unlock()
	return mock.GetByIdempotencyKeyFunc(ctx, key)
}

// GetByIdempotencyKeyCalls gets all the calls that were made to GetByIdempotencyKey.
// Check the length with:
//
//	len(mockedDepositStore.GetByIdempotencyKeyCalls())
func (mock *DepositStoreMock) GetByIdempotencyKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetByIdempotencyKey.RLock()
	calls = mock.calls.GetByIdempotencyKey
	mock.lockGetByIdempotencyKey.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DepositStoreMock) Update(ctx context.Context, deposit *entity.Deposit) error {
	if mock.UpdateFunc == nil {
		panic("DepositStoreMock.UpdateFunc: method is nil but DepositStore.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Deposit *entity.Deposit
	}{
		Ctx:     ctx,
		Deposit: deposit,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, deposit)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedDepositStore.UpdateCalls())
func (mock *DepositStoreMock) UpdateCalls() []struct {
	Ctx     context.Context
	Deposit *entity.Deposit
} {
	var calls []struct {
		Ctx     context.Context
		Deposit *entity.Deposit
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateExternalData calls UpdateExternalDataFunc.
func (mock *DepositStoreMock) UpdateExternalData(ctx context.Context, id uuid.UUID, extID string, status entity.DepositStatus) error {
	if mock.UpdateExternalDataFunc == nil {
		panic("DepositStoreMock.UpdateExternalDataFunc: method is nil but DepositStore.UpdateExternalData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		ExtID  string
		Status entity.DepositStatus
	}{
		Ctx:    ctx,
		ID:     id,
		ExtID:  extID,
		Status: status,
	}
	mock.lockUpdateExternalData.Lock()
	mock.calls.UpdateExternalData = append(mock.calls.UpdateExternalData, callInfo)
	mock.lockUpdateExternalData.Unlock()
	return mock.UpdateExternalDataFunc(ctx, id, extID, status)
}

// UpdateExternalDataCalls gets all the calls that were made to UpdateExternalData.
// Check the length with:
//
//	len(mockedDepositStore.UpdateExternalDataCalls())
func (mock *DepositStoreMock) UpdateExternalDataCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	ExtID  string
	Status entity.DepositStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		ExtID  string
		Status entity.DepositStatus
	}
	mock.lockUpdateExternalData.RLock()
	calls = mock.calls.UpdateExternalData
	mock.lockUpdateExternalData.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *DepositStoreMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.DepositStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("DepositStoreMock.UpdateStatusFunc: method is nil but DepositStore.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status entity.DepositStatus
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedDepositStore.UpdateStatusCalls())
func (mock *DepositStoreMock) UpdateStatusCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Status entity.DepositStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status entity.DepositStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
