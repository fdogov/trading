// Code generated by gowrap. DO NOT EDIT.
// template: ../postgres/wrapper_errors.gotmpl
// gowrap: http://gitlab.diftech.org/gommon/gowrap

package storegen

import (
	"context"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ store.OrderStore = &OrderStoreWrappedErrors{}

// OrderStoreWrappedErrors implements store.OrderStore interface wrapped with Postgres errors handler
type OrderStoreWrappedErrors struct {
	r store.OrderStore
}

// NewOrderStoreWrappedErrors takes several implementations of the store.OrderStore and returns an instance of store.OrderStore
// which calls all implementations concurrently with given interval and returns first non-error response.
func NewOrderStoreWrappedErrors(r store.OrderStore) OrderStoreWrappedErrors {
	return OrderStoreWrappedErrors{r: r}
}

// Create implements store.OrderStore
func (m OrderStoreWrappedErrors) Create(ctx context.Context, order *entity.Order) (err error) {
	err = m.r.Create(ctx, order)
	err = store.HandlePGError(err)
	return
}

// GetByExtID implements store.OrderStore
func (m OrderStoreWrappedErrors) GetByExtID(ctx context.Context, extID string) (op1 *entity.Order, err error) {
	op1, err = m.r.GetByExtID(ctx, extID)
	err = store.HandlePGError(err)
	return
}

// GetByID implements store.OrderStore
func (m OrderStoreWrappedErrors) GetByID(ctx context.Context, id uuid.UUID) (op1 *entity.Order, err error) {
	op1, err = m.r.GetByID(ctx, id)
	err = store.HandlePGError(err)
	return
}

// GetByIdempotencyKey implements store.OrderStore
func (m OrderStoreWrappedErrors) GetByIdempotencyKey(ctx context.Context, key string) (op1 *entity.Order, err error) {
	op1, err = m.r.GetByIdempotencyKey(ctx, key)
	err = store.HandlePGError(err)
	return
}

// Update implements store.OrderStore
func (m OrderStoreWrappedErrors) Update(ctx context.Context, order *entity.Order) (err error) {
	err = m.r.Update(ctx, order)
	err = store.HandlePGError(err)
	return
}

// UpdateStatus implements store.OrderStore
func (m OrderStoreWrappedErrors) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.OrderStatus) (err error) {
	err = m.r.UpdateStatus(ctx, id, status)
	err = store.HandlePGError(err)
	return
}
