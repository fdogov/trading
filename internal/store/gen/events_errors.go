// Code generated by gowrap. DO NOT EDIT.
// template: ../postgres/wrapper_errors.gotmpl
// gowrap: http://gitlab.diftech.org/gommon/gowrap

package storegen

import (
	"context"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ store.EventStore = &EventStoreWrappedErrors{}

// EventStoreWrappedErrors implements store.EventStore interface wrapped with Postgres errors handler
type EventStoreWrappedErrors struct {
	r store.EventStore
}

// NewEventStoreWrappedErrors takes several implementations of the store.EventStore and returns an instance of store.EventStore
// which calls all implementations concurrently with given interval and returns first non-error response.
func NewEventStoreWrappedErrors(r store.EventStore) EventStoreWrappedErrors {
	return EventStoreWrappedErrors{r: r}
}

// Create implements store.EventStore
func (m EventStoreWrappedErrors) Create(ctx context.Context, event *entity.Event) (err error) {
	err = m.r.Create(ctx, event)
	err = store.HandlePGError(err)
	return
}

// GetByEventID implements store.EventStore
func (m EventStoreWrappedErrors) GetByEventID(ctx context.Context, id string, eventType entity.EventType) (ep1 *entity.Event, err error) {
	ep1, err = m.r.GetByEventID(ctx, id, eventType)
	err = store.HandlePGError(err)
	return
}
