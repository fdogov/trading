// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storegen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
)

// Ensure, that OrderStoreMock does implement store.OrderStore.
// If this is not the case, regenerate this file with moq.
var _ store.OrderStore = &OrderStoreMock{}

// OrderStoreMock is a mock implementation of store.OrderStore.
//
//	func TestSomethingThatUsesOrderStore(t *testing.T) {
//
//		// make and configure a mocked store.OrderStore
//		mockedOrderStore := &OrderStoreMock{
//			CreateFunc: func(ctx context.Context, order *entity.Order) error {
//				panic("mock out the Create method")
//			},
//			GetByExtIDFunc: func(ctx context.Context, extID string) (*entity.Order, error) {
//				panic("mock out the GetByExtID method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*entity.Order, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByIdempotencyKeyFunc: func(ctx context.Context, key string) (*entity.Order, error) {
//				panic("mock out the GetByIdempotencyKey method")
//			},
//			UpdateFunc: func(ctx context.Context, order *entity.Order) error {
//				panic("mock out the Update method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, id uuid.UUID, status entity.OrderStatus) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedOrderStore in code that requires store.OrderStore
//		// and then make assertions.
//
//	}
type OrderStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, order *entity.Order) error

	// GetByExtIDFunc mocks the GetByExtID method.
	GetByExtIDFunc func(ctx context.Context, extID string) (*entity.Order, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*entity.Order, error)

	// GetByIdempotencyKeyFunc mocks the GetByIdempotencyKey method.
	GetByIdempotencyKeyFunc func(ctx context.Context, key string) (*entity.Order, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, order *entity.Order) error

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, id uuid.UUID, status entity.OrderStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order *entity.Order
		}
		// GetByExtID holds details about calls to the GetByExtID method.
		GetByExtID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExtID is the extID argument value.
			ExtID string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByIdempotencyKey holds details about calls to the GetByIdempotencyKey method.
		GetByIdempotencyKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order *entity.Order
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Status is the status argument value.
			Status entity.OrderStatus
		}
	}
	lockCreate              sync.RWMutex
	lockGetByExtID          sync.RWMutex
	lockGetByID             sync.RWMutex
	lockGetByIdempotencyKey sync.RWMutex
	lockUpdate              sync.RWMutex
	lockUpdateStatus        sync.RWMutex
}

// Create calls CreateFunc.
func (mock *OrderStoreMock) Create(ctx context.Context, order *entity.Order) error {
	if mock.CreateFunc == nil {
		panic("OrderStoreMock.CreateFunc: method is nil but OrderStore.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order *entity.Order
	}{
		Ctx:   ctx,
		Order: order,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, order)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedOrderStore.CreateCalls())
func (mock *OrderStoreMock) CreateCalls() []struct {
	Ctx   context.Context
	Order *entity.Order
} {
	var calls []struct {
		Ctx   context.Context
		Order *entity.Order
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByExtID calls GetByExtIDFunc.
func (mock *OrderStoreMock) GetByExtID(ctx context.Context, extID string) (*entity.Order, error) {
	if mock.GetByExtIDFunc == nil {
		panic("OrderStoreMock.GetByExtIDFunc: method is nil but OrderStore.GetByExtID was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ExtID string
	}{
		Ctx:   ctx,
		ExtID: extID,
	}
	mock.lockGetByExtID.Lock()
	mock.calls.GetByExtID = append(mock.calls.GetByExtID, callInfo)
	mock.lockGetByExtID.Unlock()
	return mock.GetByExtIDFunc(ctx, extID)
}

// GetByExtIDCalls gets all the calls that were made to GetByExtID.
// Check the length with:
//
//	len(mockedOrderStore.GetByExtIDCalls())
func (mock *OrderStoreMock) GetByExtIDCalls() []struct {
	Ctx   context.Context
	ExtID string
} {
	var calls []struct {
		Ctx   context.Context
		ExtID string
	}
	mock.lockGetByExtID.RLock()
	calls = mock.calls.GetByExtID
	mock.lockGetByExtID.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *OrderStoreMock) GetByID(ctx context.Context, id uuid.UUID) (*entity.Order, error) {
	if mock.GetByIDFunc == nil {
		panic("OrderStoreMock.GetByIDFunc: method is nil but OrderStore.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedOrderStore.GetByIDCalls())
func (mock *OrderStoreMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByIdempotencyKey calls GetByIdempotencyKeyFunc.
func (mock *OrderStoreMock) GetByIdempotencyKey(ctx context.Context, key string) (*entity.Order, error) {
	if mock.GetByIdempotencyKeyFunc == nil {
		panic("OrderStoreMock.GetByIdempotencyKeyFunc: method is nil but OrderStore.GetByIdempotencyKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetByIdempotencyKey.Lock()
	mock.calls.GetByIdempotencyKey = append(mock.calls.GetByIdempotencyKey, callInfo)
	mock.lockGetByIdempotencyKey.Unlock()
	return mock.GetByIdempotencyKeyFunc(ctx, key)
}

// GetByIdempotencyKeyCalls gets all the calls that were made to GetByIdempotencyKey.
// Check the length with:
//
//	len(mockedOrderStore.GetByIdempotencyKeyCalls())
func (mock *OrderStoreMock) GetByIdempotencyKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetByIdempotencyKey.RLock()
	calls = mock.calls.GetByIdempotencyKey
	mock.lockGetByIdempotencyKey.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *OrderStoreMock) Update(ctx context.Context, order *entity.Order) error {
	if mock.UpdateFunc == nil {
		panic("OrderStoreMock.UpdateFunc: method is nil but OrderStore.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order *entity.Order
	}{
		Ctx:   ctx,
		Order: order,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, order)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedOrderStore.UpdateCalls())
func (mock *OrderStoreMock) UpdateCalls() []struct {
	Ctx   context.Context
	Order *entity.Order
} {
	var calls []struct {
		Ctx   context.Context
		Order *entity.Order
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *OrderStoreMock) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.OrderStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("OrderStoreMock.UpdateStatusFunc: method is nil but OrderStore.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status entity.OrderStatus
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedOrderStore.UpdateStatusCalls())
func (mock *OrderStoreMock) UpdateStatusCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Status entity.OrderStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status entity.OrderStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
