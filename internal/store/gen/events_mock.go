// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storegen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
)

// Ensure, that EventStoreMock does implement store.EventStore.
// If this is not the case, regenerate this file with moq.
var _ store.EventStore = &EventStoreMock{}

// EventStoreMock is a mock implementation of store.EventStore.
//
//	func TestSomethingThatUsesEventStore(t *testing.T) {
//
//		// make and configure a mocked store.EventStore
//		mockedEventStore := &EventStoreMock{
//			CreateFunc: func(ctx context.Context, event *entity.Event) error {
//				panic("mock out the Create method")
//			},
//			GetByEventIDFunc: func(ctx context.Context, id string, eventType entity.EventType) (*entity.Event, error) {
//				panic("mock out the GetByEventID method")
//			},
//		}
//
//		// use mockedEventStore in code that requires store.EventStore
//		// and then make assertions.
//
//	}
type EventStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, event *entity.Event) error

	// GetByEventIDFunc mocks the GetByEventID method.
	GetByEventIDFunc func(ctx context.Context, id string, eventType entity.EventType) (*entity.Event, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event *entity.Event
		}
		// GetByEventID holds details about calls to the GetByEventID method.
		GetByEventID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// EventType is the eventType argument value.
			EventType entity.EventType
		}
	}
	lockCreate       sync.RWMutex
	lockGetByEventID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *EventStoreMock) Create(ctx context.Context, event *entity.Event) error {
	if mock.CreateFunc == nil {
		panic("EventStoreMock.CreateFunc: method is nil but EventStore.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event *entity.Event
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, event)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedEventStore.CreateCalls())
func (mock *EventStoreMock) CreateCalls() []struct {
	Ctx   context.Context
	Event *entity.Event
} {
	var calls []struct {
		Ctx   context.Context
		Event *entity.Event
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByEventID calls GetByEventIDFunc.
func (mock *EventStoreMock) GetByEventID(ctx context.Context, id string, eventType entity.EventType) (*entity.Event, error) {
	if mock.GetByEventIDFunc == nil {
		panic("EventStoreMock.GetByEventIDFunc: method is nil but EventStore.GetByEventID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		EventType entity.EventType
	}{
		Ctx:       ctx,
		ID:        id,
		EventType: eventType,
	}
	mock.lockGetByEventID.Lock()
	mock.calls.GetByEventID = append(mock.calls.GetByEventID, callInfo)
	mock.lockGetByEventID.Unlock()
	return mock.GetByEventIDFunc(ctx, id, eventType)
}

// GetByEventIDCalls gets all the calls that were made to GetByEventID.
// Check the length with:
//
//	len(mockedEventStore.GetByEventIDCalls())
func (mock *EventStoreMock) GetByEventIDCalls() []struct {
	Ctx       context.Context
	ID        string
	EventType entity.EventType
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		EventType entity.EventType
	}
	mock.lockGetByEventID.RLock()
	calls = mock.calls.GetByEventID
	mock.lockGetByEventID.RUnlock()
	return calls
}
