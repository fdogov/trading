// Code generated by gowrap. DO NOT EDIT.
// template: ../postgres/wrapper_errors.gotmpl
// gowrap: http://gitlab.diftech.org/gommon/gowrap

package storegen

import (
	"context"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ store.AccountStore = &AccountStoreWrappedErrors{}

// AccountStoreWrappedErrors implements store.AccountStore interface wrapped with Postgres errors handler
type AccountStoreWrappedErrors struct {
	r store.AccountStore
}

// NewAccountStoreWrappedErrors takes several implementations of the store.AccountStore and returns an instance of store.AccountStore
// which calls all implementations concurrently with given interval and returns first non-error response.
func NewAccountStoreWrappedErrors(r store.AccountStore) AccountStoreWrappedErrors {
	return AccountStoreWrappedErrors{r: r}
}

// Create implements store.AccountStore
func (m AccountStoreWrappedErrors) Create(ctx context.Context, account *entity.Account) (err error) {
	err = m.r.Create(ctx, account)
	err = store.HandlePGError(err)
	return
}

// GetByExtID implements store.AccountStore
func (m AccountStoreWrappedErrors) GetByExtID(ctx context.Context, extID string) (ap1 *entity.Account, err error) {
	ap1, err = m.r.GetByExtID(ctx, extID)
	err = store.HandlePGError(err)
	return
}

// GetByID implements store.AccountStore
func (m AccountStoreWrappedErrors) GetByID(ctx context.Context, id uuid.UUID) (ap1 *entity.Account, err error) {
	ap1, err = m.r.GetByID(ctx, id)
	err = store.HandlePGError(err)
	return
}

// GetByUserID implements store.AccountStore
func (m AccountStoreWrappedErrors) GetByUserID(ctx context.Context, userID string) (apa1 []*entity.Account, err error) {
	apa1, err = m.r.GetByUserID(ctx, userID)
	err = store.HandlePGError(err)
	return
}

// UpdateBalance implements store.AccountStore
func (m AccountStoreWrappedErrors) UpdateBalance(ctx context.Context, id uuid.UUID, amount decimal.Decimal) (err error) {
	err = m.r.UpdateBalance(ctx, id, amount)
	err = store.HandlePGError(err)
	return
}
