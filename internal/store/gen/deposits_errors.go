// Code generated by gowrap. DO NOT EDIT.
// template: ../postgres/wrapper_errors.gotmpl
// gowrap: http://gitlab.diftech.org/gommon/gowrap

package storegen

import (
	"context"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/store"
	"github.com/google/uuid"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ store.DepositStore = &DepositStoreWrappedErrors{}

// DepositStoreWrappedErrors implements store.DepositStore interface wrapped with Postgres errors handler
type DepositStoreWrappedErrors struct {
	r store.DepositStore
}

// NewDepositStoreWrappedErrors takes several implementations of the store.DepositStore and returns an instance of store.DepositStore
// which calls all implementations concurrently with given interval and returns first non-error response.
func NewDepositStoreWrappedErrors(r store.DepositStore) DepositStoreWrappedErrors {
	return DepositStoreWrappedErrors{r: r}
}

// Create implements store.DepositStore
func (m DepositStoreWrappedErrors) Create(ctx context.Context, deposit *entity.Deposit) (err error) {
	err = m.r.Create(ctx, deposit)
	err = store.HandlePGError(err)
	return
}

// GetByAccountID implements store.DepositStore
func (m DepositStoreWrappedErrors) GetByAccountID(ctx context.Context, accountID uuid.UUID) (dpa1 []*entity.Deposit, err error) {
	dpa1, err = m.r.GetByAccountID(ctx, accountID)
	err = store.HandlePGError(err)
	return
}

// GetByExtID implements store.DepositStore
func (m DepositStoreWrappedErrors) GetByExtID(ctx context.Context, extID string) (dp1 *entity.Deposit, err error) {
	dp1, err = m.r.GetByExtID(ctx, extID)
	err = store.HandlePGError(err)
	return
}

// GetByID implements store.DepositStore
func (m DepositStoreWrappedErrors) GetByID(ctx context.Context, id uuid.UUID) (dp1 *entity.Deposit, err error) {
	dp1, err = m.r.GetByID(ctx, id)
	err = store.HandlePGError(err)
	return
}

// GetByIdempotencyKey implements store.DepositStore
func (m DepositStoreWrappedErrors) GetByIdempotencyKey(ctx context.Context, key string) (dp1 *entity.Deposit, err error) {
	dp1, err = m.r.GetByIdempotencyKey(ctx, key)
	err = store.HandlePGError(err)
	return
}

// Update implements store.DepositStore
func (m DepositStoreWrappedErrors) Update(ctx context.Context, deposit *entity.Deposit) (err error) {
	err = m.r.Update(ctx, deposit)
	err = store.HandlePGError(err)
	return
}

// UpdateExternalData implements store.DepositStore
func (m DepositStoreWrappedErrors) UpdateExternalData(ctx context.Context, id uuid.UUID, extID string, status entity.DepositStatus) (err error) {
	err = m.r.UpdateExternalData(ctx, id, extID, status)
	err = store.HandlePGError(err)
	return
}

// UpdateStatus implements store.DepositStore
func (m DepositStoreWrappedErrors) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.DepositStatus) (err error) {
	err = m.r.UpdateStatus(ctx, id, status)
	err = store.HandlePGError(err)
	return
}
