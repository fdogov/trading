// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storegen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/store"
)

// Ensure, that DBTransactorMock does implement store.DBTransactor.
// If this is not the case, regenerate this file with moq.
var _ store.DBTransactor = &DBTransactorMock{}

// DBTransactorMock is a mock implementation of store.DBTransactor.
//
//	func TestSomethingThatUsesDBTransactor(t *testing.T) {
//
//		// make and configure a mocked store.DBTransactor
//		mockedDBTransactor := &DBTransactorMock{
//			ExecFunc: func(ctx context.Context, fn func(ctx context.Context) error) error {
//				panic("mock out the Exec method")
//			},
//		}
//
//		// use mockedDBTransactor in code that requires store.DBTransactor
//		// and then make assertions.
//
//	}
type DBTransactorMock struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, fn func(ctx context.Context) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fn is the fn argument value.
			Fn func(ctx context.Context) error
		}
	}
	lockExec sync.RWMutex
}

// Exec calls ExecFunc.
func (mock *DBTransactorMock) Exec(ctx context.Context, fn func(ctx context.Context) error) error {
	if mock.ExecFunc == nil {
		panic("DBTransactorMock.ExecFunc: method is nil but DBTransactor.Exec was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Fn  func(ctx context.Context) error
	}{
		Ctx: ctx,
		Fn:  fn,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, fn)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDBTransactor.ExecCalls())
func (mock *DBTransactorMock) ExecCalls() []struct {
	Ctx context.Context
	Fn  func(ctx context.Context) error
} {
	var calls []struct {
		Ctx context.Context
		Fn  func(ctx context.Context) error
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}
