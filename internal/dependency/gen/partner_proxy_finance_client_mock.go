// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dependencygen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/dependency"
	"github.com/fdogov/trading/internal/entity"
)

// Ensure, that PartnerProxyFinanceClientMock does implement dependency.PartnerProxyFinanceClient.
// If this is not the case, regenerate this file with moq.
var _ dependency.PartnerProxyFinanceClient = &PartnerProxyFinanceClientMock{}

// PartnerProxyFinanceClientMock is a mock implementation of dependency.PartnerProxyFinanceClient.
//
//	func TestSomethingThatUsesPartnerProxyFinanceClient(t *testing.T) {
//
//		// make and configure a mocked dependency.PartnerProxyFinanceClient
//		mockedPartnerProxyFinanceClient := &PartnerProxyFinanceClientMock{
//			CreateDepositFunc: func(ctx context.Context, deposit *entity.Deposit, extAccountID string) (*dependency.DepositResponse, error) {
//				panic("mock out the CreateDeposit method")
//			},
//		}
//
//		// use mockedPartnerProxyFinanceClient in code that requires dependency.PartnerProxyFinanceClient
//		// and then make assertions.
//
//	}
type PartnerProxyFinanceClientMock struct {
	// CreateDepositFunc mocks the CreateDeposit method.
	CreateDepositFunc func(ctx context.Context, deposit *entity.Deposit, extAccountID string) (*dependency.DepositResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateDeposit holds details about calls to the CreateDeposit method.
		CreateDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deposit is the deposit argument value.
			Deposit *entity.Deposit
			// ExtAccountID is the extAccountID argument value.
			ExtAccountID string
		}
	}
	lockCreateDeposit sync.RWMutex
}

// CreateDeposit calls CreateDepositFunc.
func (mock *PartnerProxyFinanceClientMock) CreateDeposit(ctx context.Context, deposit *entity.Deposit, extAccountID string) (*dependency.DepositResponse, error) {
	if mock.CreateDepositFunc == nil {
		panic("PartnerProxyFinanceClientMock.CreateDepositFunc: method is nil but PartnerProxyFinanceClient.CreateDeposit was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Deposit      *entity.Deposit
		ExtAccountID string
	}{
		Ctx:          ctx,
		Deposit:      deposit,
		ExtAccountID: extAccountID,
	}
	mock.lockCreateDeposit.Lock()
	mock.calls.CreateDeposit = append(mock.calls.CreateDeposit, callInfo)
	mock.lockCreateDeposit.Unlock()
	return mock.CreateDepositFunc(ctx, deposit, extAccountID)
}

// CreateDepositCalls gets all the calls that were made to CreateDeposit.
// Check the length with:
//
//	len(mockedPartnerProxyFinanceClient.CreateDepositCalls())
func (mock *PartnerProxyFinanceClientMock) CreateDepositCalls() []struct {
	Ctx          context.Context
	Deposit      *entity.Deposit
	ExtAccountID string
} {
	var calls []struct {
		Ctx          context.Context
		Deposit      *entity.Deposit
		ExtAccountID string
	}
	mock.lockCreateDeposit.RLock()
	calls = mock.calls.CreateDeposit
	mock.lockCreateDeposit.RUnlock()
	return calls
}
