// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dependencygen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/dependency"
	"github.com/fdogov/trading/internal/entity"
	"github.com/shopspring/decimal"
)

// Ensure, that PartnerProxyOrderClientMock does implement dependency.PartnerProxyOrderClient.
// If this is not the case, regenerate this file with moq.
var _ dependency.PartnerProxyOrderClient = &PartnerProxyOrderClientMock{}

// PartnerProxyOrderClientMock is a mock implementation of dependency.PartnerProxyOrderClient.
//
//	func TestSomethingThatUsesPartnerProxyOrderClient(t *testing.T) {
//
//		// make and configure a mocked dependency.PartnerProxyOrderClient
//		mockedPartnerProxyOrderClient := &PartnerProxyOrderClientMock{
//			CreateOrderFunc: func(ctx context.Context, extAccountID string, symbol string, quantity decimal.Decimal, price decimal.Decimal, currency string, side entity.OrderSide) (string, entity.OrderStatus, error) {
//				panic("mock out the CreateOrder method")
//			},
//		}
//
//		// use mockedPartnerProxyOrderClient in code that requires dependency.PartnerProxyOrderClient
//		// and then make assertions.
//
//	}
type PartnerProxyOrderClientMock struct {
	// CreateOrderFunc mocks the CreateOrder method.
	CreateOrderFunc func(ctx context.Context, extAccountID string, symbol string, quantity decimal.Decimal, price decimal.Decimal, currency string, side entity.OrderSide) (string, entity.OrderStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateOrder holds details about calls to the CreateOrder method.
		CreateOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExtAccountID is the extAccountID argument value.
			ExtAccountID string
			// Symbol is the symbol argument value.
			Symbol string
			// Quantity is the quantity argument value.
			Quantity decimal.Decimal
			// Price is the price argument value.
			Price decimal.Decimal
			// Currency is the currency argument value.
			Currency string
			// Side is the side argument value.
			Side entity.OrderSide
		}
	}
	lockCreateOrder sync.RWMutex
}

// CreateOrder calls CreateOrderFunc.
func (mock *PartnerProxyOrderClientMock) CreateOrder(ctx context.Context, extAccountID string, symbol string, quantity decimal.Decimal, price decimal.Decimal, currency string, side entity.OrderSide) (string, entity.OrderStatus, error) {
	if mock.CreateOrderFunc == nil {
		panic("PartnerProxyOrderClientMock.CreateOrderFunc: method is nil but PartnerProxyOrderClient.CreateOrder was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ExtAccountID string
		Symbol       string
		Quantity     decimal.Decimal
		Price        decimal.Decimal
		Currency     string
		Side         entity.OrderSide
	}{
		Ctx:          ctx,
		ExtAccountID: extAccountID,
		Symbol:       symbol,
		Quantity:     quantity,
		Price:        price,
		Currency:     currency,
		Side:         side,
	}
	mock.lockCreateOrder.Lock()
	mock.calls.CreateOrder = append(mock.calls.CreateOrder, callInfo)
	mock.lockCreateOrder.Unlock()
	return mock.CreateOrderFunc(ctx, extAccountID, symbol, quantity, price, currency, side)
}

// CreateOrderCalls gets all the calls that were made to CreateOrder.
// Check the length with:
//
//	len(mockedPartnerProxyOrderClient.CreateOrderCalls())
func (mock *PartnerProxyOrderClientMock) CreateOrderCalls() []struct {
	Ctx          context.Context
	ExtAccountID string
	Symbol       string
	Quantity     decimal.Decimal
	Price        decimal.Decimal
	Currency     string
	Side         entity.OrderSide
} {
	var calls []struct {
		Ctx          context.Context
		ExtAccountID string
		Symbol       string
		Quantity     decimal.Decimal
		Price        decimal.Decimal
		Currency     string
		Side         entity.OrderSide
	}
	mock.lockCreateOrder.RLock()
	calls = mock.calls.CreateOrder
	mock.lockCreateOrder.RUnlock()
	return calls
}
