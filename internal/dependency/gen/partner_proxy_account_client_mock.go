// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dependencygen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/dependency"
	"github.com/shopspring/decimal"
)

// Ensure, that PartnerProxyAccountClientMock does implement dependency.PartnerProxyAccountClient.
// If this is not the case, regenerate this file with moq.
var _ dependency.PartnerProxyAccountClient = &PartnerProxyAccountClientMock{}

// PartnerProxyAccountClientMock is a mock implementation of dependency.PartnerProxyAccountClient.
//
//	func TestSomethingThatUsesPartnerProxyAccountClient(t *testing.T) {
//
//		// make and configure a mocked dependency.PartnerProxyAccountClient
//		mockedPartnerProxyAccountClient := &PartnerProxyAccountClientMock{
//			GetAccountBalanceFunc: func(ctx context.Context, extAccountID string) (*decimal.Decimal, error) {
//				panic("mock out the GetAccountBalance method")
//			},
//		}
//
//		// use mockedPartnerProxyAccountClient in code that requires dependency.PartnerProxyAccountClient
//		// and then make assertions.
//
//	}
type PartnerProxyAccountClientMock struct {
	// GetAccountBalanceFunc mocks the GetAccountBalance method.
	GetAccountBalanceFunc func(ctx context.Context, extAccountID string) (*decimal.Decimal, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAccountBalance holds details about calls to the GetAccountBalance method.
		GetAccountBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExtAccountID is the extAccountID argument value.
			ExtAccountID string
		}
	}
	lockGetAccountBalance sync.RWMutex
}

// GetAccountBalance calls GetAccountBalanceFunc.
func (mock *PartnerProxyAccountClientMock) GetAccountBalance(ctx context.Context, extAccountID string) (*decimal.Decimal, error) {
	if mock.GetAccountBalanceFunc == nil {
		panic("PartnerProxyAccountClientMock.GetAccountBalanceFunc: method is nil but PartnerProxyAccountClient.GetAccountBalance was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ExtAccountID string
	}{
		Ctx:          ctx,
		ExtAccountID: extAccountID,
	}
	mock.lockGetAccountBalance.Lock()
	mock.calls.GetAccountBalance = append(mock.calls.GetAccountBalance, callInfo)
	mock.lockGetAccountBalance.Unlock()
	return mock.GetAccountBalanceFunc(ctx, extAccountID)
}

// GetAccountBalanceCalls gets all the calls that were made to GetAccountBalance.
// Check the length with:
//
//	len(mockedPartnerProxyAccountClient.GetAccountBalanceCalls())
func (mock *PartnerProxyAccountClientMock) GetAccountBalanceCalls() []struct {
	Ctx          context.Context
	ExtAccountID string
} {
	var calls []struct {
		Ctx          context.Context
		ExtAccountID string
	}
	mock.lockGetAccountBalance.RLock()
	calls = mock.calls.GetAccountBalance
	mock.lockGetAccountBalance.RUnlock()
	return calls
}
