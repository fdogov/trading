// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package produsersgen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/producers"
	"github.com/shopspring/decimal"
)

// Ensure, that DepositProducerIMock does implement producers.DepositProducerI.
// If this is not the case, regenerate this file with moq.
var _ producers.DepositProducerI = &DepositProducerIMock{}

// DepositProducerIMock is a mock implementation of producers.DepositProducerI.
//
//	func TestSomethingThatUsesDepositProducerI(t *testing.T) {
//
//		// make and configure a mocked producers.DepositProducerI
//		mockedDepositProducerI := &DepositProducerIMock{
//			SendDepositEventFunc: func(ctx context.Context, deposit *entity.Deposit, userID string, balanceNew decimal.Decimal, idempotencyKey string) error {
//				panic("mock out the SendDepositEvent method")
//			},
//		}
//
//		// use mockedDepositProducerI in code that requires producers.DepositProducerI
//		// and then make assertions.
//
//	}
type DepositProducerIMock struct {
	// SendDepositEventFunc mocks the SendDepositEvent method.
	SendDepositEventFunc func(ctx context.Context, deposit *entity.Deposit, userID string, balanceNew decimal.Decimal, idempotencyKey string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendDepositEvent holds details about calls to the SendDepositEvent method.
		SendDepositEvent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deposit is the deposit argument value.
			Deposit *entity.Deposit
			// UserID is the userID argument value.
			UserID string
			// BalanceNew is the balanceNew argument value.
			BalanceNew decimal.Decimal
			// IdempotencyKey is the idempotencyKey argument value.
			IdempotencyKey string
		}
	}
	lockSendDepositEvent sync.RWMutex
}

// SendDepositEvent calls SendDepositEventFunc.
func (mock *DepositProducerIMock) SendDepositEvent(ctx context.Context, deposit *entity.Deposit, userID string, balanceNew decimal.Decimal, idempotencyKey string) error {
	if mock.SendDepositEventFunc == nil {
		panic("DepositProducerIMock.SendDepositEventFunc: method is nil but DepositProducerI.SendDepositEvent was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Deposit        *entity.Deposit
		UserID         string
		BalanceNew     decimal.Decimal
		IdempotencyKey string
	}{
		Ctx:            ctx,
		Deposit:        deposit,
		UserID:         userID,
		BalanceNew:     balanceNew,
		IdempotencyKey: idempotencyKey,
	}
	mock.lockSendDepositEvent.Lock()
	mock.calls.SendDepositEvent = append(mock.calls.SendDepositEvent, callInfo)
	mock.lockSendDepositEvent.Unlock()
	return mock.SendDepositEventFunc(ctx, deposit, userID, balanceNew, idempotencyKey)
}

// SendDepositEventCalls gets all the calls that were made to SendDepositEvent.
// Check the length with:
//
//	len(mockedDepositProducerI.SendDepositEventCalls())
func (mock *DepositProducerIMock) SendDepositEventCalls() []struct {
	Ctx            context.Context
	Deposit        *entity.Deposit
	UserID         string
	BalanceNew     decimal.Decimal
	IdempotencyKey string
} {
	var calls []struct {
		Ctx            context.Context
		Deposit        *entity.Deposit
		UserID         string
		BalanceNew     decimal.Decimal
		IdempotencyKey string
	}
	mock.lockSendDepositEvent.RLock()
	calls = mock.calls.SendDepositEvent
	mock.lockSendDepositEvent.RUnlock()
	return calls
}
