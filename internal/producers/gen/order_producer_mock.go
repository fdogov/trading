// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package produsersgen

import (
	"context"
	"sync"

	"github.com/fdogov/trading/internal/entity"
	"github.com/fdogov/trading/internal/producers"
	"github.com/shopspring/decimal"
)

// Ensure, that OrderProducerIMock does implement producers.OrderProducerI.
// If this is not the case, regenerate this file with moq.
var _ producers.OrderProducerI = &OrderProducerIMock{}

// OrderProducerIMock is a mock implementation of producers.OrderProducerI.
//
//	func TestSomethingThatUsesOrderProducerI(t *testing.T) {
//
//		// make and configure a mocked producers.OrderProducerI
//		mockedOrderProducerI := &OrderProducerIMock{
//			SendOrderEventFunc: func(ctx context.Context, order *entity.Order, balanceNew decimal.Decimal) error {
//				panic("mock out the SendOrderEvent method")
//			},
//		}
//
//		// use mockedOrderProducerI in code that requires producers.OrderProducerI
//		// and then make assertions.
//
//	}
type OrderProducerIMock struct {
	// SendOrderEventFunc mocks the SendOrderEvent method.
	SendOrderEventFunc func(ctx context.Context, order *entity.Order, balanceNew decimal.Decimal) error

	// calls tracks calls to the methods.
	calls struct {
		// SendOrderEvent holds details about calls to the SendOrderEvent method.
		SendOrderEvent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order *entity.Order
			// BalanceNew is the balanceNew argument value.
			BalanceNew decimal.Decimal
		}
	}
	lockSendOrderEvent sync.RWMutex
}

// SendOrderEvent calls SendOrderEventFunc.
func (mock *OrderProducerIMock) SendOrderEvent(ctx context.Context, order *entity.Order, balanceNew decimal.Decimal) error {
	if mock.SendOrderEventFunc == nil {
		panic("OrderProducerIMock.SendOrderEventFunc: method is nil but OrderProducerI.SendOrderEvent was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Order      *entity.Order
		BalanceNew decimal.Decimal
	}{
		Ctx:        ctx,
		Order:      order,
		BalanceNew: balanceNew,
	}
	mock.lockSendOrderEvent.Lock()
	mock.calls.SendOrderEvent = append(mock.calls.SendOrderEvent, callInfo)
	mock.lockSendOrderEvent.Unlock()
	return mock.SendOrderEventFunc(ctx, order, balanceNew)
}

// SendOrderEventCalls gets all the calls that were made to SendOrderEvent.
// Check the length with:
//
//	len(mockedOrderProducerI.SendOrderEventCalls())
func (mock *OrderProducerIMock) SendOrderEventCalls() []struct {
	Ctx        context.Context
	Order      *entity.Order
	BalanceNew decimal.Decimal
} {
	var calls []struct {
		Ctx        context.Context
		Order      *entity.Order
		BalanceNew decimal.Decimal
	}
	mock.lockSendOrderEvent.RLock()
	calls = mock.calls.SendOrderEvent
	mock.lockSendOrderEvent.RUnlock()
	return calls
}
